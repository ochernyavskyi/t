# This is a pipeline for CI/CD to AWS via S3

name: CI-CD-Pipeline-To-AWS
env:
    AWS_S3_Bucket_Name : "my-test-bucket-odessa"
    EB_Application_Name: "Docker"
    EB_Env: "Docker-env"
    DeployPackageName: "docker_app_${{ github.sha }}.zip"
    AWS_Region_Name: "eu-central-1"

# Controls when the workflow will run
on:
  push:
      branches:
        - main

  pull_request:
      branches:
        - main


jobs:
  ci-part:
    runs-on: ubuntu-latest

    steps:

      - name: send custom message with args
        uses: appleboy/telegram-action@master
        with:
                to: ${{ secrets.TELEGRAM_TO }}
                token: ${{ secrets.TELEGRAM_TOKEN }}
                args: The ${{ github.event_name }} event triggered first step at CI.

      - name: Git clone our repo
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

#      - name: Lint Code Base
#        uses: github/super-linter@v4
#        env:
#          VALIDATE_ALL_CODEBASE: false
#          DEFAULT_BRANCH: main
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#      - name: The job has failed
#        if: ${{ failure() }}
#        uses: appleboy/telegram-action@master
#        with:
#                to: ${{ secrets.TELEGRAM_TO }}
#                token: ${{ secrets.TELEGRAM_TOKEN }}
#                args: Ooops. There is an error during checking the code
#
#

#      - name: Create Zip deployment package
#        run: zip -r ${{ env.DeployPackageName}} ./ -x *.git*

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_Region_Name }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#      - name: Copy deployment package to S3
#        run : aws s3 cp ${{ env.DeployPackageName}} s3://${{ env.AWS_S3_Bucket_Name }}/
##
#      - name: Print happy message for CI
#        run :  echo "CI part finished succesfully"
#
#      - name: send custom message with args
#        uses: appleboy/telegram-action@master
#        with:
#               to: ${{ secrets.TELEGRAM_TO }}
#               token: ${{ secrets.TELEGRAM_TOKEN }}
#               args: CI part finished succesfully.
#
#
#  cd-part:
#    runs-on: ubuntu-latest
#    needs: [ci-part]
#
#    steps:
#
#      - name: send custom message with args
#        uses: appleboy/telegram-action@master
#        with:
#             to: ${{ secrets.TELEGRAM_TO }}
#             token: ${{ secrets.TELEGRAM_TOKEN }}
#             args: The ${{ github.event_name }} event triggered first step at CD.
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
#          aws-region: ${{ env.AWS_Region_Name }}
#
#      - name: Create new elastic application
#        run : |
#          aws elasticbeanstalk create-application-version \
#          --application-name ${{ env.EB_Application_Name }} \
#          --source-bundle S3Bucket="${{ env.AWS_S3_Bucket_Name }}",S3Key="${{ env.DeployPackageName }}" \
#          --version-label "Ver-${{ github.sha }}" \
#          --description "CommitSHA-${{ github.sha }}"
#
#      - name: Deploy new application
#        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_Env }} --version-label "Ver-${{ github.sha }}"
#
#      - name: Print happy message for CI
#        run :  echo "CD part finished succesfully"
#
#      - name: send custom message with args
#        uses: appleboy/telegram-action@master
#        with:
#             to: ${{ secrets.TELEGRAM_TO }}
#             token: ${{ secrets.TELEGRAM_TOKEN }}
#             args: CI/CD has completed succesfully.